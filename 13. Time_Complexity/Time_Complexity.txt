int n;
cin >> n;
a = 0;
for(int i=1; i<=n; i++){
    a += 1;
}

This one time complexity is LINEAR
Because if input is 5 then it will run 5 times, if input is 10 then it will run
10 times.






int n;
cin >> n;
a = 0;
for(int i=1; i<=n; i++){
    for(int j=1; j<=n; j++){
        a += 1;
    }
}

This one time complexity is QUADRATIC because it is the square of the input
If input is 5 then it will execute 25 times





















WORST CASE, BEST CASE, AVERAGE CASE

Example 1:
Search
    20  10  5  100  300  17  238

x = 50  (Worst case because it is not in the array)
x = 238 (Average case because it is in the end of the array)
x = 20  (Best case because the first element is only the correct one)

Avg time = (1+2+3....n)/n
Avg time = (n+1)/2

Best case    => Constant
Worst case   => n
Average case => n






DENOTE
Best case => Omega sign
Worst case => O sign
Average case => Theta sign

We can say Omega(1), O(n), Theta(n)






TIME COMPLEXITY CALCULATION
Example 1:
    int m, n;
    cin >> n >> m;
    int a=0;
    for(int i=1; i<=n; i++){
        a = a+1;
    }
    for(int j=1; j<=m; j++){
        a = a+1;
    }

Time complexity is no of times a = a+1 is executed
So time complexity is O(n+m)






Example 2:
    int m, n;
    cin >> n >> m;
    int a=0;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=m; j++){
            a = a+rand();
        }
    }
Here time complexity is O(n*m)




Example 3:
    int m, n;
    cin >> n >> m;
    int a=0;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=m; j++){
            a = a+rand();
        }
    }

    for(int i=1; i<=n; i++){
        a = a + rand();
    }

Time complexity is O(n*m + n)





Example 4:
    int n;
    cin >> n;
    int a=0, i=n;
    while(i>=1){
        a = a+1;
        i /=2;
    }
This one is very tricky
Time complexity is O(log n)


Example 5:
    int m, n;
    cin >> n;
    int count=0;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=n; j += i){
            count += 1;
        }
    }
This is also very difficult
Time complexity is O(log n)














COMPARISION OF ALGORITHMS
O(n), O(n^2), O(n^3)
if n=1, all will take 1 unit time
if n=2, first will take 2 unit time, second=4, third=9
if n=3, first will take 3 unit time, second=9, third=27

So we can see that in order of time taken: O(n) < O(n^2) < O(n^2)



O(n), O(log n)
if n=1, first will take 1 unit time, second will take=0
if n=2, first will take 2 unit time, second will take=1
if n=1024, first will take 1024 unit time, second will take=10




O(sqrt n), O(log n)
Here O(log n) is faster than o (sqrt n)



f(n) = n     n<=1000
     = n^2   n>1000




g1(n) = n     n<=100
      = n^4   n>100
g2(n) = n^3   n<=100
      = n^2   n>100

g1(n) + g2(n)